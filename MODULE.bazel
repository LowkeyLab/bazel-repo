module(
    name = "null",
    version = "0.1.0",
    compatibility_level = 1,
)

bazel_dep(name = "rules_shell", version = "0.6.0")
# Declare dependency on rules_rust
bazel_dep(name = "rules_rust", version = "0.64.0")

# Declare dependency on rules_oci and its dependencies
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_pkg", version = "1.1.0")

# --- Rust Configuration ---
# Use the rust extension to configure the toolchain
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2024",
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")
crate.spec(
    default_features = False,
    features = [
        "macros",
        "net",
        "rt-multi-thread",
    ],
    package = "tokio",
    version = "1.45.1",
)
crate.spec(
    default_features = False,
    features = [
        "runtime-tokio-rustls",  # `ASYNC_RUNTIME` feature
        "sqlx-postgres",  # `DATABASE_DRIVER` feature
        "cli",
    ],
    package = "sea-orm-migration",
    version = "1.1.0",
)
crate.from_specs()
use_repo(crate, "crates")

# --- OCI Configuration ---
# Use the oci extension to pull base images and configure the toolchain
oci_extension = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci_extension.pull(
    name = "distroless_cc",
    digest = "sha256:620d8b11ae800f0dbd7995f89ddc5344ad603269ea98770588b1b07a4a0a6872",
    image = "gcr.io/distroless/cc-debian12",
    platforms = [
        "linux/amd64",
    ],
)
use_repo(oci_extension, "distroless_cc", "distroless_cc_linux_amd64")
